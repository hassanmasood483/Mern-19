const arrow = () => {
  return true;
};
const array = [1, "one", true, null, undefined, [1, 2], { age: 20 }, arrow];
// console.log(array);
// console.log(array[7]());
// console.log(array[6].age);
// console.log(array[5][0]);
// // // push
// console.log(array.push("newValue"));
// console.log(array);
// // // pop
// array.pop();
// console.log(array);
// // unshift
// array.unshift("newvalue");
// console.log(array);
// // shift
// array.shift();
// console.log(array);
// // includes
// console.log(array.includes("one"));
// // indexof
// console.log(array.indexOf("one"));
// // ternary : cant use if inside array's index
// array[array.indexOf("one") > -1 ? array.indexOf("one") : array.length] = 1;
// console.log(array);
// to access the nested array as objects
// console.log(array[5].includes(1 && 2));

// // Objects:
// const Woman = {
//   name: "Summer",
//   age: 20,
//   address: {
//     city: "newyork",
//   },
//   array: [1, 2],
//   array2: [
//     function () {
//       return "array func";
//     },
//   ],
//   sayHello: function () {
//     // console.log("hellow");
//     return "hellow";
//   },
// };
// console.log(Woman.sayHello());
// console.log(Woman.array2[0]());
// // array of objects
// const person1 = {
//   name: "hxn",
//   age: 22,
// };
// const person2 = {
//   name: "ali",
//   age: 23,
// };
// const person3 = {
//   name: "ahmed",
//   age: 24,
// };
// const persons = [person1, person2, person3];
// console.log(persons[0].name);
// object methods
const person = {
  name: "hxn",
  age: 22,
};
console.log(Object.keys(person));
console.log(Object.values(person));
console.log(Object.entries(person));
